// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}
// ตารางเก็บข้อมูลสำหรับ User
model user {
  userId    String       @id @default(uuid())
  username  String       @unique
  password  String
  email     String       @unique
  createdOn DateTime     @default(now())
  profile   userProfile?
  comment   comment[]
  post      post[]
  follower  userFollow[] @relation(name: "follower")
  following userFollow[] @relation(name: "following")
  lovePost  lovePost[]
  rePost    rePost[]
}

// ตารางเก็บข้อมูล Profile ของ User
model userProfile {
  userProfileId String    @id @default(uuid())
  userId        String    @unique
  user          user      @relation(fields: [userId], references: [userId])
  name          String
  history       String?
  website       String?
  profileImage  String?
  bannerImage   String?
  updateAt      DateTime? @updatedAt
}

// ตารางเก็บข้อมูล ความสัมพันธ์ุของการติดตาม ระหว่าง User และ User
model userFollow {
  userFollowId  String @id @default(uuid())
  userId        String
  user          user   @relation(name: "following", fields: [userId], references: [userId])
  followingId   String
  followingUser user   @relation(name: "follower", fields: [followingId], references: [userId])

  @@unique([userId, followingId])
}

// ตารางเก็บข้อมูล Post ที่ User Post ทั้งหมด
model post {
  postId        String      @id @default(uuid())
  content       String
  createdUserId String
  createdUser   user        @relation(fields: [createdUserId], references: [userId])
  comment       comment[]
  postImage     postImage[]
  isDelete      Boolean     @default(false)
  createdOn     DateTime    @default(now())
  deleteOn      DateTime?
  updateAt      DateTime?   @updatedAt


  lovePost lovePost[]
  rePost   rePost[]
}

// ตารางเก็บข้อมูล รูปภาพของระบบ
model postImage {
  imageId String @id @default(uuid())
  data    String
  postId  String
  userId  String
  order   Int?
  post    post   @relation(fields: [postId], references: [postId])
}
// ตารางเก็บข้อมูล comment ทั้งหมดมีความสัมพันธ์กับ Post
model comment {
  commentId     String   @id @default(uuid())
  comment       String
  postId        String
  post          post     @relation(fields: [postId], references: [postId])
  createdUserId String
  createdUser   user     @relation(fields: [createdUserId], references: [userId])
  createdOn     DateTime @default(now())
}

// ตารางเก็บข้อมูล ความสัมพันธ์ุการกด Love ต่อ Post
model lovePost {
  lovePostId String @id @default(uuid())
  postId     String
  post       post   @relation(fields: [postId], references: [postId])
  userId     String
  user       user   @relation(fields: [userId], references: [userId])

  @@unique([postId, userId])
}

// ตารางเก็บข้อมูล ความสัมพันธ์ุการกด RePost ต่อ Post
model rePost {
  rePostId String @id @default(uuid())
  postId   String
  post     post   @relation(fields: [postId], references: [postId])
  userId   String
  user     user   @relation(fields: [userId], references: [userId])

  @@unique([postId, userId])
}
